{"componentChunkName":"component---src-templates-post-jsx","path":"/docker-deploy/","result":{"data":{"site":{"siteMetadata":{"title":"hyungkishin.blog"}},"markdownRemark":{"id":"374806d1-d43a-5f19-98e2-0d71c8cf7750","excerpt":"📝 Next.js + Docker + ECR + CloudFront 실전 배포 자동화 배경 회사는 언론사(미디어)라 AMP 지원 필수 였다. 검색엔진 최적화(SEO)와 트래픽 최적화가 필요하게 되어서 배포 진행중 갑자기 문제가 발생했다. App Router + Pages Router 혼용 프로젝트 Docker + ECR + EC2 서버기반 서비스 운영 C…","html":"<h1>📝 Next.js + Docker + ECR + CloudFront 실전 배포 자동화</h1>\n<h2>배경</h2>\n<p>회사는 언론사(미디어)라 AMP 지원 필수 였다.</p>\n<p>검색엔진 최적화(SEO)와 트래픽 최적화가 필요하게 되어서 배포 진행중 갑자기 문제가 발생했다.</p>\n<p>App Router + Pages Router 혼용 프로젝트</p>\n<p>Docker + ECR + EC2 서버기반 서비스 운영</p>\n<p>CDN은 AWS CloudFront 사용 중</p>\n<h2>문제 상황 발생</h2>\n<p>기존 수동 Docker Build + Push + 서버 재배포 과정 복잡</p>\n<p>서버 Docker OverlayFS 스토리지 드라이버 과부하로 터짐</p>\n<p>에러: \"error creating overlay mount... no such file or directory\"</p>\n<p>디스크 I/O 병목 발생 → 캐시 레이어 비정상화</p>\n<p>빌드 중 중간 레이어가 깨져서 docker-compose up 실패</p>\n<p>CDN 캐시 퍼지(purge)도 수동이라</p>\n<p>구버전 CSS + 신버전 HTML 섞여 로딩 → 스타일 깨짐 \"\"\"</p>\n<ol start=\"3\">\n<li>해결 목표\n\"\"\"text</li>\n</ol>\n<p>Dockerfile 구조 최적화 (멀티 스테이지 + 퍼미션 오류 제거)</p>\n<p>배포 자동화 스크립트 작성 (Build → Push → 서버 업데이트)</p>\n<p>CloudFront 캐시 퍼지 스크립트 작성</p>\n<p>Slack 배포 결과 알림</p>\n<p>Docker OverlayFS 장애 대비 (항상 clean build) \"\"\"</p>\n<h2>Dockerfile</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 기본 베이스 이미지\nFROM node:20.19.0-alpine AS base\n\nARG NEXT_PUBLIC_ENV ARG NODE_ENV\n\nRUN apk --no-cache add tzdata &amp;&amp;\ncp /usr/share/zoneinfo/Asia/Seoul /etc/localtime &amp;&amp;\necho \"Asia/Seoul\" > /etc/timezone\n\n2. 의존성 설치\nFROM base AS deps WORKDIR /app COPY package.json pnpm-lock.yaml ./ RUN corepack enable &amp;&amp; corepack prepare pnpm@10.9.0 --activate &amp;&amp; pnpm install --frozen-lockfile\n\n3. 앱 빌드\nFROM base AS builder WORKDIR /app COPY --from=deps /app/node_modules ./node_modules COPY . . RUN corepack enable &amp;&amp; corepack prepare pnpm@10.9.0 --activate\n\nENV NODE_ENV=production ENV NEXT_TELEMETRY_DISABLED=1 ENV CSS_MODULES_HASH_PREFIX=stable_ ENV OUTPUT=standalone\n\nARG NEXT_PUBLIC_ENV RUN if [ \"$NEXT_PUBLIC_ENV\" = \"production\" ]; then\ncp ./env/.env.production .env.production;\nelif [ \"$NEXT_PUBLIC_ENV\" = \"staging\" ]; then\ncp ./env/.env.staging .env.production;\nelif [ \"$NEXT_PUBLIC_ENV\" = \"development\" ]; then\ncp ./env/.env.development .env.production;\nelse\ncp ./env/.env.test .env.production;\nfi\n\nRUN pnpm run build</code></pre></div>\n<h2>런타임</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM base AS runner WORKDIR /app\n\nRUN npm install -g pm2 RUN addgroup --system --gid 1001 nodejs &amp;&amp; adduser --system --uid 1001 nextjs\n\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./ COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static COPY --from=builder --chown=nextjs:nodejs /app/public ./public COPY --from=builder --chown=nextjs:nodejs /app/public/fonts ./public/fonts COPY --from=builder --chown=nextjs:nodejs /app/.next/server/pages/amp ./.next/server/pages/amp\n\nRUN mkdir -p .next/static/media &amp;&amp; chown -R nextjs:nodejs .next\n\nUSER nextjs\n\nEXPOSE 3000 ENV PORT=3000 ENV HOSTNAME=\"0.0.0.0\"\n\nCMD [\"pm2-runtime\", \"start\", \"server.js\", \"-i\", \"2\", \"--max-memory-restart\", \"1536M\"] \"\"\"</code></pre></div>\n<h2>배포 자동화 스크립트 (deploy.sh)</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\nset -e\n\nAWS_PROFILE=default AWS_REGION=ap-northeast-2 AWS_ECR_REPOSITORY=537124952818.dkr.ecr.ap-northeast-2.amazonaws.com/kthome-prd-frontend-ecr CLOUDFRONT_DISTRIBUTION_ID=YOUR_CLOUDFRONT_ID SLACK_WEBHOOK_URL=YOUR_SLACK_WEBHOOK_URL NEXT_PUBLIC_ENV=production SERVER_IP=YOUR_SERVER_IP DOCKER_COMPOSE_DIR=/home/ubuntu/deploy-folder\n\nGIT_COMMIT_HASH=$(git rev-parse --short HEAD) IMAGE_TAG=$GIT_COMMIT_HASH\n\necho \"🚀 배포 시작 (태그: $IMAGE_TAG)\"\n\ndocker build --build-arg NEXT_PUBLIC_ENV=$NEXT_PUBLIC_ENV -t $AWS_ECR_REPOSITORY:$IMAGE_TAG . aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY docker push $AWS_ECR_REPOSITORY:$IMAGE_TAG\n\nssh ubuntu@$SERVER_IP &lt;&lt; EOF cd $DOCKER_COMPOSE_DIR sed -i \"s|image: .*|image: $AWS_ECR_REPOSITORY:$IMAGE_TAG|\" docker-compose.yml docker-compose pull docker-compose up -d --remove-orphans EOF\n\naws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths\n\"/_next/data/\" \"/_next/static/\" \"/favicon.ico\" \"/robots.txt\" \"/sitemap.xml\" \"/index.html\"\n\ncurl -X POST -H 'Content-type: application/json' --data \"{ \"text\": \"✅ 배포 완료: $IMAGE_TAG\", \"attachments\": [ { \"color\": \"#36a64f\", \"fields\": [ { \"title\": \"배포 서버\", \"value\": \"$SERVER_IP\", \"short\": true }, { \"title\": \"태그\", \"value\": \"$IMAGE_TAG\", \"short\": true } ] } ] }\" $SLACK_WEBHOOK_URL\n\necho \"✅ 전체 배포 완료!\"</code></pre></div>\n<h2>Docker OverlayFS 이슈 대응 방법</h2>\n<p>Docker Build 시 --no-cache 옵션 사용 습관화</p>\n<p>오래된 dangling 이미지 주기적 제거 (ex: docker system prune -af)</p>\n<p>디스크 공간 부족 대비 → EBS 확장 정책 준비</p>\n<p>대규모 프로젝트 빌드 시 layer 수 줄이기 \"\"\"</p>\n<h2>최종 정리</h2>\n<p>배포 자동화 성공</p>\n<p>서버 깨짐(overlay2 디스크 에러) 복구</p>\n<p>AMP SEO + 일반 SEO 대응 완비</p>\n<p>Slack 실시간 배포 알림 연동</p>\n<p>ECR + EC2 + CloudFront 캐시 퍼지 자동화 완료</p>","frontmatter":{"title":"AMP","date":"April 17, 2025","update":"April 17, 2024","tags":["front-end"],"series":null},"fields":{"slug":"/docker-deploy/","readingTime":{"minutes":2.81}}},"seriesList":{"edges":[{"node":{"id":"4cc639f4-37bf-5401-b7b8-4c5d3e23c5b6","fields":{"slug":"/deploy-strategy/"},"frontmatter":{"title":"배포전략"}}},{"node":{"id":"00662a55-abc5-525f-a35e-90e2a4567225","fields":{"slug":"/kotlin/"},"frontmatter":{"title":"코틀린의 현재와 미래"}}},{"node":{"id":"49cee026-4707-58a8-9c2e-b2ee65c4f1c3","fields":{"slug":"/cpu-bound-vs-io-bound/"},"frontmatter":{"title":"CPU Bound 와 IO Bound"}}},{"node":{"id":"7d6614c0-6b90-566a-8a4e-8e4be0749cc9","fields":{"slug":"/basic/"},"frontmatter":{"title":"Redis"}}},{"node":{"id":"edee6afa-bced-5993-86ff-512b48f22028","fields":{"slug":"/rag/"},"frontmatter":{"title":"Rag"}}},{"node":{"id":"4fdc4c80-b3ef-568f-98a9-6d6f7d14f737","fields":{"slug":"/spring-ai/"},"frontmatter":{"title":"Ai. Spring AI 로 때워도 되나유? 1편"}}},{"node":{"id":"374806d1-d43a-5f19-98e2-0d71c8cf7750","fields":{"slug":"/docker-deploy/"},"frontmatter":{"title":"AMP"}}},{"node":{"id":"cb547d96-bb64-5e7e-86d7-b52051bfd56d","fields":{"slug":"/phase1/"},"frontmatter":{"title":"🗞️ 한 달간의 뉴스 사이트 프론트 성능 최적화✨"}}},{"node":{"id":"b647b419-d924-52b4-99f0-91273c90cdeb","fields":{"slug":"/phase2/"},"frontmatter":{"title":"🏗️ AMP 페이지 개발"}}},{"node":{"id":"f46e0796-437c-53a2-a1fb-c1149035de8e","fields":{"slug":"/phase4/"},"frontmatter":{"title":"퍼포먼스 최적화 를 향해 - 2부"}}},{"node":{"id":"31e4baea-f4e0-533c-a42f-1f728622fbad","fields":{"slug":"/phase3/"},"frontmatter":{"title":"퍼포먼스 최적화 를 향해 - 1부"}}}]},"previous":{"fields":{"slug":"/spring-ai/"},"frontmatter":{"title":"Ai. Spring AI 로 때워도 되나유? 1편"}},"next":{"fields":{"slug":"/phase1/"},"frontmatter":{"title":"🗞️ 한 달간의 뉴스 사이트 프론트 성능 최적화✨"}}},"pageContext":{"id":"374806d1-d43a-5f19-98e2-0d71c8cf7750","series":null,"previousPostId":"4fdc4c80-b3ef-568f-98a9-6d6f7d14f737","nextPostId":"cb547d96-bb64-5e7e-86d7-b52051bfd56d"}},"staticQueryHashes":[],"slicesMap":{}}